/*
 * Showcase API
 * Our Showcase API allows you to test the connectivity to ING in the sandbox and production environment from your application. By connecting to this API, you will learn the flow and can apply it to connect to other APIs and create your application.  This API has a GET endpoint for each connection pattern:      - `/signed/greetings` - using JWS message signature - `/mtls-only/greetings` - using only mTLS and no message signature - `/greetings/single` - using HTTP message signature  The response to a successful request is a message similar to the example below:  ``` {\\\"message\\\":\\\"Welcome to ING!\\\",\\\"id\\\":\\\"0d69d706-1e4a-4e2e-ac8d-f49bc8a31d1c\\\",\\\"messageTimestamp\\\":\\\"2018-07-30 13:23:53 GMT\\\"} ```  To consume the Showcase API in the production environment you need to create an account, subscribe to the API and request an application token as explained in the production section of the [Get started guide for Premium APIs](https://developer.ing.com/openbanking/resources/get-started/premium). The subscription to the API will need to be approved by ING before you can call the Showcase API.  To consume the Showcase API in the sandbox environment you can use the example certificates and client id provided in the [Get started guide for Premium APIs.](https://developer.ing.com/openbanking/resources/get-started/premium)
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: apis@ing.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ing.developer.greetings;

import java.util.Collection;
import java.util.Iterator;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class StringUtil {
  /**
   * Check if the given array contains the given value (with case-insensitive comparison).
   *
   * @param array The array
   * @param value The value to search
   * @return true if the array contains the value
   */
  public static boolean containsIgnoreCase(String[] array, String value) {
    for (String str : array) {
      if (value == null && str == null) {
        return true;
      }
      if (value != null && value.equalsIgnoreCase(str)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Join an array of strings with the given separator.
   * <p>
   * Note: This might be replaced by utility method from commons-lang or guava someday
   * if one of those libraries is added as dependency.
   * </p>
   *
   * @param array     The array of strings
   * @param separator The separator
   * @return the resulting string
   */
  public static String join(String[] array, String separator) {
    int len = array.length;
    if (len == 0) {
      return "";
    }

    StringBuilder out = new StringBuilder();
    out.append(array[0]);
    for (int i = 1; i < len; i++) {
      out.append(separator).append(array[i]);
    }
    return out.toString();
  }

  /**
   * Join a list of strings with the given separator.
   *
   * @param list      The list of strings
   * @param separator The separator
   * @return the resulting string
   */
  public static String join(Collection<String> list, String separator) {
    Iterator<String> iterator = list.iterator();
    StringBuilder out = new StringBuilder();
    if (iterator.hasNext()) {
      out.append(iterator.next());
    }
    while (iterator.hasNext()) {
      out.append(separator).append(iterator.next());
    }
    return out.toString();
  }
}
