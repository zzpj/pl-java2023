/*
 * Showcase API
 * Our Showcase API allows you to test the connectivity to ING in the sandbox and production environment from your application. By connecting to this API, you will learn the flow and can apply it to connect to other APIs and create your application.  This API has a GET endpoint for each connection pattern:      - `/signed/greetings` - using JWS message signature - `/mtls-only/greetings` - using only mTLS and no message signature - `/greetings/single` - using HTTP message signature  The response to a successful request is a message similar to the example below:  ``` {\\\"message\\\":\\\"Welcome to ING!\\\",\\\"id\\\":\\\"0d69d706-1e4a-4e2e-ac8d-f49bc8a31d1c\\\",\\\"messageTimestamp\\\":\\\"2018-07-30 13:23:53 GMT\\\"} ```  To consume the Showcase API in the production environment you need to create an account, subscribe to the API and request an application token as explained in the production section of the [Get started guide for Premium APIs](https://developer.ing.com/openbanking/resources/get-started/premium). The subscription to the API will need to be approved by ING before you can call the Showcase API.  To consume the Showcase API in the sandbox environment you can use the example certificates and client id provided in the [Get started guide for Premium APIs.](https://developer.ing.com/openbanking/resources/get-started/premium)
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: apis@ing.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ing.developer.greetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ing.developer.greetings.model.InnerError;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * Error message.
 */
@JsonPropertyOrder({
  Error.JSON_PROPERTY_SEVERITY,
  Error.JSON_PROPERTY_CODE,
  Error.JSON_PROPERTY_MESSAGE,
  Error.JSON_PROPERTY_SOURCE,
  Error.JSON_PROPERTY_TARGET,
  Error.JSON_PROPERTY_INNER_ERRORS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class Error {
  /**
   * Gets or Sets severity
   */
  public enum SeverityEnum {
    CRITICAL("CRITICAL"),
    
    ERROR("ERROR"),
    
    WARNING("WARNING"),
    
    INFO("INFO");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SEVERITY = "severity";
  private SeverityEnum severity;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private String source;

  public static final String JSON_PROPERTY_TARGET = "target";
  private String target;

  public static final String JSON_PROPERTY_INNER_ERRORS = "innerErrors";
  private List<@Valid InnerError> innerErrors = new ArrayList<>();

  public Error() {
  }

  public Error severity(SeverityEnum severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Get severity
   * @return severity
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SeverityEnum getSeverity() {
    return severity;
  }


  @JsonProperty(JSON_PROPERTY_SEVERITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public Error code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Service-specific error code/keyword
   * @return code
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCode(String code) {
    this.code = code;
  }


  public Error message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * A descriptive error message for the consumer
   * @return message
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  public Error source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Optional source descriptor for this error
   * @return source
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(String source) {
    this.source = source;
  }


  public Error target(String target) {
    
    this.target = target;
    return this;
  }

   /**
   * Key/value pair indicating which input property caused the error
   * @return target
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTarget(String target) {
    this.target = target;
  }


  public Error innerErrors(List<@Valid InnerError> innerErrors) {
    
    this.innerErrors = innerErrors;
    return this;
  }

  public Error addInnerErrorsItem(InnerError innerErrorsItem) {
    if (this.innerErrors == null) {
      this.innerErrors = new ArrayList<>();
    }
    this.innerErrors.add(innerErrorsItem);
    return this;
  }

   /**
   * Get innerErrors
   * @return innerErrors
  **/
  @jakarta.annotation.Nonnull
  @NotNull
  @Valid
 @Size(min=0)
  @JsonProperty(JSON_PROPERTY_INNER_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<@Valid InnerError> getInnerErrors() {
    return innerErrors;
  }


  @JsonProperty(JSON_PROPERTY_INNER_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInnerErrors(List<@Valid InnerError> innerErrors) {
    this.innerErrors = innerErrors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Error error = (Error) o;
    return Objects.equals(this.severity, error.severity) &&
        Objects.equals(this.code, error.code) &&
        Objects.equals(this.message, error.message) &&
        Objects.equals(this.source, error.source) &&
        Objects.equals(this.target, error.target) &&
        Objects.equals(this.innerErrors, error.innerErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(severity, code, message, source, target, innerErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Error {\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    innerErrors: ").append(toIndentedString(innerErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

