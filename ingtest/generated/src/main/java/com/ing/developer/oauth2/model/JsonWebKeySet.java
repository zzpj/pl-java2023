/*
 * OAuth 2.0 API
 * The OAuth 2.0 API exposes the resources for third parties to connect to ING APIs using the OAuth 2.0 protocol for authentication and authorization. This API supports the \"client credentials\", \"authorization code\" and \"refresh token\" grant types. Subscription to this API is only required when the Authorization Grant code flow is required for your application. The other supported [OAuth 2.0](https://tools.ietf.org/html/rfc6749) flows can be used without subscription.
 *
 * The version of the OpenAPI document: 2.3.5
 * Contact: apis@ing.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ing.developer.oauth2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * ING&#39;s current public key certificate encoded as a JSON Web Key SET (JWKS)
 */
@JsonPropertyOrder({
  JsonWebKeySet.JSON_PROPERTY_KTY,
  JsonWebKeySet.JSON_PROPERTY_ALG,
  JsonWebKeySet.JSON_PROPERTY_USE,
  JsonWebKeySet.JSON_PROPERTY_KID,
  JsonWebKeySet.JSON_PROPERTY_N,
  JsonWebKeySet.JSON_PROPERTY_E,
  JsonWebKeySet.JSON_PROPERTY_X5T,
  JsonWebKeySet.JSON_PROPERTY_X5C
})
@JsonTypeName("jsonWebKeySet")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class JsonWebKeySet {
  public static final String JSON_PROPERTY_KTY = "kty";
  private String kty;

  public static final String JSON_PROPERTY_ALG = "alg";
  private String alg;

  public static final String JSON_PROPERTY_USE = "use";
  private String use;

  public static final String JSON_PROPERTY_KID = "kid";
  private String kid;

  public static final String JSON_PROPERTY_N = "n";
  private String n;

  public static final String JSON_PROPERTY_E = "e";
  private String e;

  public static final String JSON_PROPERTY_X5T = "x5t";
  private String x5t;

  public static final String JSON_PROPERTY_X5C = "x5c";
  private List<String> x5c = new ArrayList<>();

  public JsonWebKeySet() {
  }

  public JsonWebKeySet kty(String kty) {
    
    this.kty = kty;
    return this;
  }

   /**
   * The key type
   * @return kty
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKty() {
    return kty;
  }


  @JsonProperty(JSON_PROPERTY_KTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKty(String kty) {
    this.kty = kty;
  }


  public JsonWebKeySet alg(String alg) {
    
    this.alg = alg;
    return this;
  }

   /**
   * The algorithm for the key
   * @return alg
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_ALG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlg() {
    return alg;
  }


  @JsonProperty(JSON_PROPERTY_ALG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlg(String alg) {
    this.alg = alg;
  }


  public JsonWebKeySet use(String use) {
    
    this.use = use;
    return this;
  }

   /**
   * How the key was meant to be used
   * @return use
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUse() {
    return use;
  }


  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUse(String use) {
    this.use = use;
  }


  public JsonWebKeySet kid(String kid) {
    
    this.kid = kid;
    return this;
  }

   /**
   * The unique identifier for the key
   * @return kid
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_KID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKid() {
    return kid;
  }


  @JsonProperty(JSON_PROPERTY_KID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKid(String kid) {
    this.kid = kid;
  }


  public JsonWebKeySet n(String n) {
    
    this.n = n;
    return this;
  }

   /**
   * The modulus for a standard pem
   * @return n
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getN() {
    return n;
  }


  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setN(String n) {
    this.n = n;
  }


  public JsonWebKeySet e(String e) {
    
    this.e = e;
    return this;
  }

   /**
   * The exponent for a standard pem
   * @return e
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getE() {
    return e;
  }


  @JsonProperty(JSON_PROPERTY_E)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setE(String e) {
    this.e = e;
  }


  public JsonWebKeySet x5t(String x5t) {
    
    this.x5t = x5t;
    return this;
  }

   /**
   * The thumbprint of the x.509 cert (SHA-1 thumbprint)
   * @return x5t
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_X5T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getX5t() {
    return x5t;
  }


  @JsonProperty(JSON_PROPERTY_X5T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setX5t(String x5t) {
    this.x5t = x5t;
  }


  public JsonWebKeySet x5c(List<String> x5c) {
    
    this.x5c = x5c;
    return this;
  }

  public JsonWebKeySet addX5cItem(String x5cItem) {
    if (this.x5c == null) {
      this.x5c = new ArrayList<>();
    }
    this.x5c.add(x5cItem);
    return this;
  }

   /**
   * The x509 certificate chain
   * @return x5c
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_X5C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getX5c() {
    return x5c;
  }


  @JsonProperty(JSON_PROPERTY_X5C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setX5c(List<String> x5c) {
    this.x5c = x5c;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonWebKeySet jsonWebKeySet = (JsonWebKeySet) o;
    return Objects.equals(this.kty, jsonWebKeySet.kty) &&
        Objects.equals(this.alg, jsonWebKeySet.alg) &&
        Objects.equals(this.use, jsonWebKeySet.use) &&
        Objects.equals(this.kid, jsonWebKeySet.kid) &&
        Objects.equals(this.n, jsonWebKeySet.n) &&
        Objects.equals(this.e, jsonWebKeySet.e) &&
        Objects.equals(this.x5t, jsonWebKeySet.x5t) &&
        Objects.equals(this.x5c, jsonWebKeySet.x5c);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kty, alg, use, kid, n, e, x5t, x5c);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonWebKeySet {\n");
    sb.append("    kty: ").append(toIndentedString(kty)).append("\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    e: ").append(toIndentedString(e)).append("\n");
    sb.append("    x5t: ").append(toIndentedString(x5t)).append("\n");
    sb.append("    x5c: ").append(toIndentedString(x5c)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

