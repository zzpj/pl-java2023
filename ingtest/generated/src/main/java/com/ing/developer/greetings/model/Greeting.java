/*
 * Showcase API
 * Our Showcase API allows you to test the connectivity to ING in the sandbox and production environment from your application. By connecting to this API, you will learn the flow and can apply it to connect to other APIs and create your application.  This API has a GET endpoint for each connection pattern:      - `/signed/greetings` - using JWS message signature - `/mtls-only/greetings` - using only mTLS and no message signature - `/greetings/single` - using HTTP message signature  The response to a successful request is a message similar to the example below:  ``` {\\\"message\\\":\\\"Welcome to ING!\\\",\\\"id\\\":\\\"0d69d706-1e4a-4e2e-ac8d-f49bc8a31d1c\\\",\\\"messageTimestamp\\\":\\\"2018-07-30 13:23:53 GMT\\\"} ```  To consume the Showcase API in the production environment you need to create an account, subscribe to the API and request an application token as explained in the production section of the [Get started guide for Premium APIs](https://developer.ing.com/openbanking/resources/get-started/premium). The subscription to the API will need to be approved by ING before you can call the Showcase API.  To consume the Showcase API in the sandbox environment you can use the example certificates and client id provided in the [Get started guide for Premium APIs.](https://developer.ing.com/openbanking/resources/get-started/premium)
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: apis@ing.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ing.developer.greetings.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * Greeting
 */
@JsonPropertyOrder({
  Greeting.JSON_PROPERTY_MESSAGE,
  Greeting.JSON_PROPERTY_ID,
  Greeting.JSON_PROPERTY_MESSAGE_TIMESTAMP
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class Greeting {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_MESSAGE_TIMESTAMP = "messageTimestamp";
  private String messageTimestamp;

  public Greeting() {
  }

  public Greeting message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * A greeting message.
   * @return message
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  public Greeting id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * A generated UUID.
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Greeting messageTimestamp(String messageTimestamp) {
    
    this.messageTimestamp = messageTimestamp;
    return this;
  }

   /**
   * The current time (GMT).
   * @return messageTimestamp
  **/
  @jakarta.annotation.Nonnull
  @NotNull

  @JsonProperty(JSON_PROPERTY_MESSAGE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessageTimestamp() {
    return messageTimestamp;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessageTimestamp(String messageTimestamp) {
    this.messageTimestamp = messageTimestamp;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Greeting greeting = (Greeting) o;
    return Objects.equals(this.message, greeting.message) &&
        Objects.equals(this.id, greeting.id) &&
        Objects.equals(this.messageTimestamp, greeting.messageTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, id, messageTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Greeting {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    messageTimestamp: ").append(toIndentedString(messageTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

